{"version":3,"sources":["Context.js","SetupForm.js","Modal.js","Loading.js","App.js","reportWebVitals.js","index.js"],"names":["table","sports","mythology","entertainment","AppContext","React","createContext","AppProvider","children","useState","waiting","setWaiting","loading","setLoading","questions","setQuestions","index","setIndex","correct","setCorrect","error","setError","amount","category","difficulty","quiz","setQuiz","isModalOpen","setIsmodelOpen","fetchQuestions","url","a","axios","catch","err","console","log","response","data","results","length","nextQuestion","oldIndex","Provider","value","handleChange","e","name","target","handleSubmit","preventDefault","closeModal","checkAnswer","oldState","useGlobalContext","useContext","SetupForm","className","htmlFor","type","id","onChange","min","max","onClick","Modal","toFixed","Loading","App","question","incorrect_answers","correct_answer","answers","tempIndex","Math","floor","random","push","dangerouslySetInnerHTML","__html","map","answer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAGMA,EAAQ,CACZC,OAAQ,GACRC,UAAW,GACXC,cAAe,IAMXC,EAAaC,IAAMC,gBAEnBC,EAAc,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACNC,oBAAS,GADH,mBAC7BC,EAD6B,KACpBC,EADoB,OAENF,oBAAS,GAFH,mBAE7BG,EAF6B,KAEpBC,EAFoB,OAGFJ,mBAAS,IAHP,mBAG7BK,EAH6B,KAGlBC,EAHkB,OAIVN,mBAAS,GAJC,mBAI7BO,EAJ6B,KAItBC,EAJsB,OAKNR,mBAAS,GALH,mBAK7BS,EAL6B,KAKpBC,EALoB,OAMVV,oBAAS,GANC,mBAM7BW,EAN6B,KAMtBC,EANsB,OAOZZ,mBAAS,CAC/Ba,OAAQ,GACRC,SAAU,SACVC,WAAY,SAVsB,mBAO7BC,EAP6B,KAOvBC,EAPuB,OAYEjB,oBAAS,GAZX,mBAY7BkB,EAZ6B,KAYhBC,EAZgB,KAc9BC,EAAc,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACrBlB,GAAW,GACXF,GAAW,GAFU,SAGEqB,IAAMF,GAAKG,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MAHxC,QAGfG,EAHe,SAKbC,EAAOD,EAASC,KAAKC,SAClBC,OAAS,GAChBzB,EAAauB,GACbzB,GAAW,GACXF,GAAW,GACXU,GAAS,KAETV,GAAW,GACXU,GAAS,IAGXV,GAAW,GAhBQ,2CAAH,sDAwBd8B,EAAe,WACnBxB,GAAS,SAACyB,GACR,IAAM1B,EAAQ0B,EAAW,EACzB,OAAI1B,EAAQF,EAAU0B,OAAS,GANjCZ,GAAe,GAQJ,GAEAZ,MA+Bb,OACE,cAACZ,EAAWuC,SAAZ,CACEC,MAAO,CACLlC,UACAE,UACAE,YACAE,QACAE,UACAS,cACAkB,aAtBe,SAACC,GACpB,IAAMC,EAAOD,EAAEE,OAAOD,KAChBH,EAAQE,EAAEE,OAAOJ,MACvBlB,EAAQ,2BAAKD,GAAN,kBAAasB,EAAOH,MAoBvBK,aAjBe,SAACH,GACpBA,EAAEI,iBADwB,IAElB5B,EAAiCG,EAAjCH,OAAQC,EAAyBE,EAAzBF,SAAUC,EAAeC,EAAfD,WACpBM,EAAG,UA7EQ,+BA6ER,kBAA4BR,EAA5B,uBAAiDE,EAAjD,qBAAwExB,EAAMuB,GAA9E,kBACTM,EAAeC,IAcXqB,WA9Ba,WACjBxC,GAAW,GACXQ,EAAW,GACXS,GAAe,IA4BXa,eACAhB,OACA2B,YAxCc,SAACR,GACfA,GACFzB,GAAW,SAACkC,GAAD,OAAcA,EAAW,KAEtCZ,KAqCIrB,SAdJ,SAiBGZ,KAKM8C,EAAmB,WAC9B,OAAOC,qBAAWnD,IClDLoD,G,MA7DG,WAAO,IAAD,EACuBF,IAArC7B,EADc,EACdA,KAAMoB,EADQ,EACRA,aAAcI,EADN,EACMA,aAC5B,OACE,+BACE,yBAASQ,UAAU,oBAAnB,SACE,uBAAMA,UAAU,iBAAhB,UACE,gDAEA,sBAAKA,UAAU,eAAf,UACE,uBAAOC,QAAQ,SAAf,iCACA,uBACEC,KAAK,SACLZ,KAAK,SACLa,GAAG,SACHhB,MAAOnB,EAAKH,OACZuC,SAAUhB,EACVY,UAAU,aACVK,IAAK,EACLC,IAAK,QAIT,sBAAKN,UAAU,eAAf,UACE,uBAAOC,QAAQ,WAAf,sBACA,yBACEX,KAAK,WACLa,GAAG,WACHH,UAAU,aACVb,MAAOnB,EAAKF,SACZsC,SAAUhB,EALZ,UAOE,wBAAQD,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,gBAAd,iCAIJ,sBAAKa,UAAU,eAAf,UACE,uBAAOC,QAAQ,aAAf,wBACA,yBACEX,KAAK,aACLa,GAAG,aACHH,UAAU,aACVb,MAAOnB,EAAKD,WACZqC,SAAUhB,EALZ,UAOE,wBAAQD,MAAM,SAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,OAAd,wBAIJ,wBAAQe,KAAK,SAASK,QAASf,EAAcQ,UAAU,aAAvD,gCC9BKQ,EAtBD,WAAO,IAAD,EACsCX,IAAhD3B,EADU,EACVA,YAAawB,EADH,EACGA,WAAYjC,EADf,EACeA,QAASJ,EADxB,EACwBA,UAC1C,OACE,qBACE2C,UAAS,UACP9B,EAAc,yBAA2B,mBAF7C,SAKE,sBAAK8B,UAAU,gBAAf,UACE,2CACA,+CACkBvC,EAAUJ,EAAU0B,OAAU,KAAK0B,QAAQ,GAD7D,qBAIA,wBAAQT,UAAU,YAAYO,QAASb,EAAvC,8BCROgB,EAPC,WACd,OACE,+BACE,qBAAKV,UAAU,eC4DNW,MA1Df,WAAgB,IAAD,EASTd,IAPF5C,EAFW,EAEXA,QACAE,EAHW,EAGXA,QACAE,EAJW,EAIXA,UACAE,EALW,EAKXA,MACAE,EANW,EAMXA,QACAuB,EAPW,EAOXA,aACAW,EARW,EAQXA,YAEF,GAAI1C,EACF,OAAO,cAAC,EAAD,IAET,GAAIE,EACF,OAAO,cAAC,EAAD,IAdI,MAiB2CE,EAAUE,GAA1DqD,EAjBK,EAiBLA,SAAUC,EAjBL,EAiBKA,kBAAmBC,EAjBxB,EAiBwBA,eAEjCC,EAAO,YAAOF,GACZG,EAAYC,KAAKC,MAAsB,EAAhBD,KAAKE,UAQlC,OAPkB,IAAdH,EACFD,EAAQK,KAAKN,IAEbC,EAAQK,KAAKL,EAAQC,IACrBD,EAAQC,GAAaF,GAIrB,iCACE,cAAC,EAAD,IACA,0BAASd,UAAU,OAAnB,UACE,oBAAGA,UAAU,iBAAb,8BACoBvC,EADpB,IAC8BF,KAE9B,0BAASyC,UAAU,YAAnB,UACE,oBAAIqB,wBAAyB,CAAEC,OAAQV,KACvC,qBAAKZ,UAAU,gBAAf,SACGe,EAAQQ,KAAI,SAACC,EAAQjE,GACpB,OACE,wBAEEyC,UAAU,aACVO,QAAS,kBAAMZ,EAAYmB,IAAmBU,IAC9CH,wBAAyB,CAAEC,OAAQE,IAH9BjE,WASf,wBAAQyC,UAAU,oBAAoBO,QAASvB,EAA/C,kCC7COyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e22dd7ec.chunk.js","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst table = {\r\n  sports: 21,\r\n  mythology: 20,\r\n  entertainment: 32,\r\n};\r\n\r\nconst API_ENDPOINT = \"https://opentdb.com/api.php?\";\r\n//const tempUrl = 'https://opentdb.com/api.php?amount=10&category=21&difficulty=easy&type=multiple\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const [waiting, setWaiting] = useState(true);\r\n  const [loading, setLoading] = useState(false);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [index, setIndex] = useState(0);\r\n  const [correct, setCorrect] = useState(0);\r\n  const [error, setError] = useState(false);\r\n  const [quiz, setQuiz] = useState({\r\n    amount: 10,\r\n    category: \"sports\",\r\n    difficulty: \"easy\",\r\n  });\r\n  const [isModalOpen, setIsmodelOpen] = useState(false);\r\n\r\n  const fetchQuestions = async (url) => {\r\n    setLoading(true);\r\n    setWaiting(false);\r\n    const response = await axios(url).catch((err) => console.log(err));\r\n    if (response) {\r\n      const data = response.data.results;\r\n      if (data.length > 0) {\r\n        setQuestions(data);\r\n        setLoading(false);\r\n        setWaiting(false);\r\n        setError(false);\r\n      } else {\r\n        setWaiting(true);\r\n        setError(true);\r\n      }\r\n    } else {\r\n      setWaiting(true);\r\n    }\r\n  };\r\n\r\n  const openModal = () => {\r\n    setIsmodelOpen(true);\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    setIndex((oldIndex) => {\r\n      const index = oldIndex + 1;\r\n      if (index > questions.length - 1) {\r\n        openModal();\r\n        return 0;\r\n      } else {\r\n        return index;\r\n      }\r\n    });\r\n  };\r\n\r\n  const checkAnswer = (value) => {\r\n    if (value) {\r\n      setCorrect((oldState) => oldState + 1);\r\n    }\r\n    nextQuestion();\r\n  };\r\n\r\n  const closeModal = () => {\r\n    setWaiting(true);\r\n    setCorrect(0);\r\n    setIsmodelOpen(false);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    const name = e.target.name;\r\n    const value = e.target.value;\r\n    setQuiz({ ...quiz, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { amount, category, difficulty } = quiz;\r\n    const url = `${API_ENDPOINT}amount=${amount}&difficulty=${difficulty}&category=${table[category]}&type=multiple`;\r\n    fetchQuestions(url);\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        waiting,\r\n        loading,\r\n        questions,\r\n        index,\r\n        correct,\r\n        isModalOpen,\r\n        handleChange,\r\n        handleSubmit,\r\n        closeModal,\r\n        nextQuestion,\r\n        quiz,\r\n        checkAnswer,\r\n        error,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"./Context\";\r\n\r\nconst SetupForm = () => {\r\n  const { quiz, handleChange, handleSubmit } = useGlobalContext();\r\n  return (\r\n    <main>\r\n      <section className=\"quiz quiz-section\">\r\n        <form className=\"clarusway-quiz\">\r\n          <h2>Clarusway Quiz</h2>\r\n\r\n          <div className=\"form-control\">\r\n            <label htmlFor=\"amount\">Number of Questions</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"amount\"\r\n              id=\"amount\"\r\n              value={quiz.amount}\r\n              onChange={handleChange}\r\n              className=\"form-input\"\r\n              min={5}\r\n              max={20}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-control\">\r\n            <label htmlFor=\"category\">Category</label>\r\n            <select\r\n              name=\"category\"\r\n              id=\"category\"\r\n              className=\"form-input\"\r\n              value={quiz.category}\r\n              onChange={handleChange}\r\n            >\r\n              <option value=\"sports\">Sports</option>\r\n              <option value=\"mythology\">Mythology</option>\r\n              <option value=\"entertainment\">Entertainment</option>\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"form-control\">\r\n            <label htmlFor=\"difficulty\">Difficulty</label>\r\n            <select\r\n              name=\"difficulty\"\r\n              id=\"difficulty\"\r\n              className=\"form-input\"\r\n              value={quiz.difficulty}\r\n              onChange={handleChange}\r\n            >\r\n              <option value=\"sports\">Easy</option>\r\n              <option value=\"medium\">Medium</option>\r\n              <option value=\"hard\">Hard</option>\r\n            </select>\r\n          </div>\r\n\r\n          <button type=\"submit\" onClick={handleSubmit} className=\"submit-btn\">\r\n            Let's Go!\r\n          </button>\r\n        </form>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default SetupForm;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"./Context\";\r\n\r\nconst Modal = () => {\r\n  const { isModalOpen, closeModal, correct, questions } = useGlobalContext();\r\n  return (\r\n    <div\r\n      className={`${\r\n        isModalOpen ? \"modal-container isOpen\" : \"modal-container\"\r\n      }`}\r\n    >\r\n      <div className=\"modal-content\">\r\n        <h2>Congrats!</h2>\r\n        <p>\r\n          You answered {((correct / questions.length) * 100).toFixed(0)} % of\r\n          questions\r\n        </p>\r\n        <button className=\"close-btn\" onClick={closeModal}>\r\n          Play Again\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <main>\r\n      <div className=\"loading\"></div>\r\n    </main>\r\n  );\r\n};\r\nexport default Loading;\r\n","import React from \"react\";\nimport { useGlobalContext } from \"./Context\";\nimport \"./App.css\";\nimport SetupForm from \"./SetupForm\";\nimport Modal from \"./Modal\";\nimport Loading from \"./Loading\";\n\nfunction App() {\n  const {\n    waiting,\n    loading,\n    questions,\n    index,\n    correct,\n    nextQuestion,\n    checkAnswer,\n  } = useGlobalContext();\n  if (waiting) {\n    return <SetupForm />;\n  }\n  if (loading) {\n    return <Loading />;\n  }\n\n  const { question, incorrect_answers, correct_answer } = questions[index];\n\n  let answers = [...incorrect_answers];\n  const tempIndex = Math.floor(Math.random() * 4);\n  if (tempIndex === 3) {\n    answers.push(correct_answer);\n  } else {\n    answers.push(answers[tempIndex]);\n    answers[tempIndex] = correct_answer;\n  }\n\n  return (\n    <main>\n      <Modal />\n      <section className=\"quiz\">\n        <p className=\"correct-answer\">\n          correct answers: {correct}/{index}\n        </p>\n        <article className=\"container\">\n          <h2 dangerouslySetInnerHTML={{ __html: question }} />\n          <div className=\"btn-container\">\n            {answers.map((answer, index) => {\n              return (\n                <button\n                  key={index}\n                  className=\"answer-btn\"\n                  onClick={() => checkAnswer(correct_answer === answer)}\n                  dangerouslySetInnerHTML={{ __html: answer }}\n                />\n              );\n            })}\n          </div>\n        </article>\n        <button className=\"next-question-btn\" onClick={nextQuestion}>\n          Next Question\n        </button>\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { AppProvider } from \"./Context\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}